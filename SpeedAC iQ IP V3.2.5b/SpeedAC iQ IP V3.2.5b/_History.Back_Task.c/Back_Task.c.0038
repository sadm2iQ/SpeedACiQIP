/*-----------------------------------------------------------------------------
-- File Name: Back_Task.c 
--
-- Copyright 2015 PremierTech as an unpublished work. 
-- All Rights Reserved.
--
-- The information contained herein is confidential property of 
-- Premier Tech.  The use, copying, transfer or disclosure of such
-- information is prohibited except by express written agreement with
-- Premier Tech.
--
-- First written on August, 2015 by Steve Santerre.
--
-- Module Description:
-- This file is dedicated to background_task function
------------------------------------------------------------------------------*/
int ScanTimeStart,ScanTimeEnd,ScanTime_ms,ScanTimeTotal,ScanTimeMax,ScanTime_msMax,ScanTimeBegin;
int ServiceModeStatus,feeddelaystart,feeddelayduration;  //0=Not in SM, 1=in SM, 2=just Out of SM


// Moved to Global functions.c #include "BT_DBases.h"
#include "FlexIOs.c"
#include "BT_Logic.c"

/*------------------------------------------------------------------------- 
--  Procedure Name    : BTInit
--  Created by        : Steve Santerre
--  Last modified on  : 2015/08
--  
--  Purpose           : This function is called to initialize backgroundtask
--                     necessary values prior to use it
--  Value Parameters  :
--  Variable Params   : none
--  Side Effects      : 
--                      
--------------------------------------------------------------------------*/
void BTInit(void)
{
InputReg1 = 0;
InputReg2 = 0;

FaultResetReq();

MaxNumbOfIO = ReadMaxNumbOfIO();
if(SeqModeManager==0)  SeqModeManager  = stp_OFF_MODE;
if(SeqMaster==0)       SeqMaster       = stp_INIT;
if(SeqSpout==0)        SeqSpout        = stp_INIT;
if(SeqWeighPan==0)     SeqWeighPan     = stp_INIT;
if(SeqFeeder==0)       SeqFeeder       = stp_INIT;
if(SeqFeedSTD==0)      SeqFeedSTD      = stp_INIT;
if(SeqManDischarge==0) SeqManDischarge = stp_INIT;

ServiceModeStatus = 0;
InitDone = ON;
}

/*------------------------------------------------------------------------- 
--  Procedure Name    : IOErrorCheck
--  Created by        : Steve Santerre
--  Last modified on  : 2017/09
--  
--  Purpose           : This function is called to sense
--                     Digital IO errors
--  Value Parameters  : IOErrorMem = Already in Error
--  Variable Params   : none
--  Side Effects      : 
--                      
--------------------------------------------------------------------------*/
bool IOErrorCheck(bool IOErrorMem)
{
int error1,error2;
string group[1];  
  
  error1 = 0;
  error2 = 0;
 
  if(MaxNumbOfIO > 0 && MaxNumbOfIO <= 31)
   { 
    error1 = perror(MaxNumbOfIO,0);
   } 
  
  else
   {
    error1 = perror(31,0);
    error2 = perror(MaxNumbOfIO,32);
   }
 
 if(error1 || error2)
  {
   if(!IOErrorMem)
    {
      if(error2 >= 16777216)      group ="8";
      else if(error2 >= 65536)    group ="7";
      else if(error2 >= 256)      group ="6";
      else if(error2 >= 1)        group ="5";
      
      if(error1 >= 16777216)      group ="4";
      else if(error1 >= 65536)    group ="3";
      else if(error1 >= 256)      group ="2";
      else if(error1 >= 1)        group ="1";
      
      SystemErrorCode = concat("307 Digital IO Error - Group ",group);
    }
   return(ON);
  }
  
 else
  return(OFF);     
}

//Verify Discharge Door sensor State when it starts to close
void CheckDischDoor(void)
{  
      if(O_DischDoorMem != IO_State[O_DischDoor])
      {
        O_DischDoorMem = IO_State[O_DischDoor];
        if((!MP.InvertFeedAndDischOutputs && !IO_State[O_DischDoor]) || (MP.InvertFeedAndDischOutputs && IO_State[O_DischDoor]))//modified by namk 21/06/2019
        {
         DischDoorStillClose = Input_State(I_DischDoorClose);
        } 
      }
      
      //Discharge Door Not Closed Fault
    if (IO_Enable[I_DischDoorClose])
    { 
     if(I_DischDoorCloseMem != Input_State(I_DischDoorClose) || ClearFaultON)
     {
        I_DischDoorCloseMem = Input_State(I_DischDoorClose);
        if((!I_DischDoorCloseMem && !MP.StopWithGatesAndDischDoorOpen) && ((!MP.InvertFeedAndDischOutputs && !IO_State[O_DischDoor]) || (MP.InvertFeedAndDischOutputs && IO_State[O_DischDoor])))//modified by namk 21/06/2019
          I_DischDoorCloseLost = ON;
        else
          I_DischDoorCloseLost = OFF;
        ClearFaultON = false;
     }      
           
     if((!Input_State(I_DischDoorClose) || DischDoorStillClose || I_DischDoorCloseLost) && ((!MP.InvertFeedAndDischOutputs && !IO_State[O_DischDoor]) || (MP.InvertFeedAndDischOutputs && IO_State[O_DischDoor])))//modified by namk 21/06/2019
      {
       if(!FaultState(FltG_DischDoorNotClosed))
       {
        if(!T_EN[T_DischDoorMaxTime]&& MP.DischDoorMaxTime!=0) 
         T_EnOn(T_DischDoorMaxTime);
        if(T_Dn(T_DischDoorMaxTime)||MP.DischDoorMaxTime==0 || DischDoorStillClose || I_DischDoorCloseLost) 
         {
          FaultHandler(FltG_DischDoorNotClosed,"");
          T_EnOff(T_DischDoorMaxTime);
          DischDoorStillClose = OFF;
         }
       }
      } 
     else if(T_EN[T_DischDoorMaxTime])
      { 
       T_EnOff(T_DischDoorMaxTime);
      } 
    }
} 

//Verify Feed gate sensor State when it starts to close
void CheckFeedGate(void)
{
   if(O_BulkFeedMem != IO_State[O_BulkFeed] || O_DribbleFeedMem != IO_State[O_DribbleFeed])
      {
        O_BulkFeedMem     = IO_State[O_BulkFeed];
        O_DribbleFeedMem  = IO_State[O_DribbleFeed];
        
        if(!IO_State[O_BulkFeed] && !IO_State[O_DribbleFeed])
        {
         FeedGateStillClose = Input_State(I_FeedGateClose);
        } 
      }
 
}
     
/*------------------------------------------------------------------------- 
--  Procedure Name    : background_task
--  Created by        : Steve Santerre
--  Last modified on  : 2015/08
--  
--  Purpose           : This function runs indefinitely 
--                      as a parallel task to the main
--  Value Parameters  :
--  Variable Params   : none
--  Side Effects      : 
--                      
--------------------------------------------------------------------------*/
//#define USE_INTERRUPT 
 
float ScanTimeOffset,scanavg;
int scan[20],scanmem[20],scanval[100],i,ScanTime_msMaxMem,scancnt,scansum,scanprev,scalestatus;
int FTcycleCnt;
bool CheckScanTime,IOTestFlagMem;
string CPSource[1024],CPDest[10][63];

void FillingTask (void)
{
  iQRegisterEventReception ();
  InitDone = OFF;
  Refresh_BTInit=true;

#ifndef USE_INTERRUPT  
for(;;)
{
#endif
  
  scanFTBegin = systemtimer_ms();
  ScanFTInterval = scanFTBegin - scanFTLast;
  scanFTLast = scanFTBegin;
  
  if(!FillingTaskHeartBeat) 
   {
    FillingTaskHeartBeat = ON;
    FTcycleCnt = 0;
   } 
  else FTcycleCnt++;
  
  if (Refresh_BTInit) 
  {
    BTInit();
    Refresh_BTInit=false;
  }
    
 

          scan[0] = systemtimer_ms();
  
           ScaleStatus[Scale1] = getweight(Scale1Adm);
           if(ScaleStatus[Scale1]!=0) 
             scalestatus = ScaleStatus[Scale1];
           IsSettled[Scale1]      = issettled;
           NetWeight[Scale1]      = net;
           NetWeightHiRes[Scale1] = nethires;
           MaxWeight[Scale1]      = capacity;
           
           if(ServiceModeEntered)
            {
             SMEntered = ON;
            }
             
           if(RestartPopupClosed)
            {
             SMEntered = OFF;
             RestartPopupClosed = OFF;
            } 

               
           if (SMEnteredMEM != SMEntered)
           {    
            SMEnteredMEM = SMEntered;
            ChangeSMStateFlag = Execute;
           }
           
  if(InitDone)
         {
                  
          scan[1] = systemtimer_ms();
          
          
          
                        
           if(!ServiceModeEntered)
               IOError = IOErrorCheck(IOError);
               
              switch (Current_Screen)
              {
               case SCREEN_IOTEST_IN1:
               case SCREEN_IOTEST_IN2:
               case SCREEN_IOTEST_IN3:
                 {
                 InTest = ON;
                 if(!ServiceModeEntered && !IOError)IN_Refresh(); 
                 }
                 break;
               
               case SCREEN_IOCFG_IN1:
               case SCREEN_IOCFG_IN2:
               case SCREEN_IOCFG_IN3:
               case SCREEN_IOCFG_OUT1:
               case SCREEN_IOCFG_OUT2:
               case SCREEN_IOCFG_OUT3:
                    IOCFG_Active = ON;
                 break;
                   
               default : 
                         InTest = OFF;
                         IOCFG_Active = OFF;
                         if(!ServiceModeEntered && !IOError)IN_Refresh2();
              }
          
          scan[2] = systemtimer_ms(); 
           DischReqCheck();    
          scan[3] = systemtimer_ms();    
           SEQ_ModeManager();
          scan[4] = systemtimer_ms(); 
           SEQ_Master();
          scan[5] = systemtimer_ms(); 
           SEQ_Feeder();
          scan[6] = systemtimer_ms(); 
           SEQ_FeedSTD();
          scan[7] = systemtimer_ms(); 
           SEQ_WeighPan();
          scan[8] = systemtimer_ms(); 
           SEQ_ManDischarge();
          scan[9] = systemtimer_ms(); 
           CheckFailSafeON();
           CheckStopWithGatesAndDischDoorOpen();
                   
          //if(WeighingDataRefreshFlag)
          if(WeighingDataRefreshFlag && DischProd && EmptyWeightReady) //SADM2 2020
          {
           if(LastTwoWeighment)
           {
            CutoffTemp = CutoffTemp; //SADM2 2020 November
           }
           else
           {
            CutoffTemp = WP.Cutoff; //SADM2 2020 November
           }
      
           WeighingDataRefresh();
           WeighingDataRefreshFlag = OFF;
           DischProd = OFF; //SADM2 2020 NOVEMBER
           EmptyWeightReady = OFF; //SADM2 2020 NOVEMBER
          }
          
          
              switch (Current_Screen)
              {
               case SCREEN_IOTEST_OUT1:
               case SCREEN_IOTEST_OUT2:
               case SCREEN_IOTEST_OUT3:
                 {
                   if(iQOutputEnabled)iQOutRelease();
                   if(!ServiceModeEntered && !IOError)
                    {
                    OutTest = ON;
                    Force_Out ();
                    }
                 }
                 break;
                              
               case SCREEN_IOCFG_IN1:
               case SCREEN_IOCFG_IN2:
               case SCREEN_IOCFG_IN3:
               case SCREEN_IOCFG_OUT1:
               case SCREEN_IOCFG_OUT2:
               case SCREEN_IOCFG_OUT3:
                 break;
                   
               default : OutTest = OFF;
                         if(!ServiceModeEntered && !IOError)
                          {
                            if(InTest)
                              {
                               OUT_Refresh();
                              } 
                            else
                             { 
                              RefreshFeederOutputs();
                              OUT_Refresh2();
                             }
                          }   
              }
              IOTestFlag = InTest || OutTest;
              if(!IOTestFlag && IOTestFlagMem)
               {
                OutResetFlag = Execute;
               }
              IOTestFlagMem = IOTestFlag;

              if(!ServiceModeEntered && Fault_Type[FLT_GEN] == 0) 
               {
                Flex_Outputs(); 
                Flex_Counter();
               }
              
              if(!AutoMode)
               {
                if (Current_Screen==SCREEN_IOCFG_OUT1 || Current_Screen==SCREEN_IOCFG_OUT2 || Current_Screen==SCREEN_IOCFG_OUT3)
                  {
                   IOCFG_OUT_Flag = ON;
                  }
                else
                 if (IOCFG_OUT_Flag)
                  {
                    IOCFG_OUT_Flag = OFF;
                    CheckOutput = ON;
                  }
               }   
                
              if(CheckOutput)
               {
                CheckOutputConfig();
                CheckOutput = OFF;
               }
               
               CheckDischDoor();
               CheckFeedGate();
                
             updateio(); 
         }
         scan[11] = systemtimer_ms();

//Scan Equalizing with delay() function  
  if(CheckScanTime)
   {            
    ScanTimeEnd = systemtimer_ms();
    ScanTotal = ScanTimeEnd - ScanTimeBegin;
    ScanTimeBegin = systemtimer_ms();
    ScanTime_ms = (ScanTimeEnd - ScanTimeStart); //*10;
    ScanTimeOffset = Lim(ScanMin,ScanMax,string(ScanMax-(ScanTime_ms/1000.0)));
#ifndef USE_INTERRUPT      
    delay (ScanTimeOffset);                                                      
#endif
    ScanTimeTotal = ScanTime_ms + (ScanTimeOffset*1000);
    if(ScanTimeTotal > ScanTimeMax)   ScanTimeMax =ScanTimeTotal;
    if(ScanTime_ms > ScanTime_msMax)  ScanTime_msMax = ScanTime_ms;        
   }
   

//Scan Average Calculation  
  scanprev = scanval[scancnt];
  scanval[scancnt] = ScanTime_ms;
  scansum = scansum + ScanTime_ms - scanprev;
  scanavg = scansum / 100.0;
  scancnt++;
  if(scancnt>99) scancnt = 0; 
  
//scanmem to log which function is taking scan time  
  if(ScanTime_msMax >= 20)
   {
   ScanTime_msMaxMem = ScanTime_msMax;
   ScanTime_msMax=0;
    for(i=0;i<20;i++)
     {
      scanmem[i] = scan[i];
     }
   }
    
//must stay at the end
  ScanTimeStart= systemtimer_ms();
  CheckScanTime = ON;
        
#ifndef USE_INTERRUPT  
} 
#endif
}